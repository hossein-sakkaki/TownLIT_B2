# Generated by Django 4.2.4 on 2025-05-26 17:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import utils.common.utils
import validators.mediaValidators.image_validators
import validators.mediaValidators.pdf_validators
import validators.security_validators
import validators.user_validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('profiles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('posts', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EducationProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_name', models.CharField(choices=[('Bachelor of Theology (BTh)', 'Bachelor of Theology (BTh)'), ('Bachelor of Biblical Studies (BBS)', 'Bachelor of Biblical Studies (BBS)'), ('Bachelor of Divinity (BDiv)', 'Bachelor of Divinity (BDiv)'), ('Bachelor of Arts in Religious Studies (BA)', 'Bachelor of Arts in Religious Studies (BA)'), ('Bachelor of Ministry (BMin)', 'Bachelor of Ministry (BMin)'), ('Bachelor of Christian Counseling (BCC)', 'Bachelor of Christian Counseling (BCC)'), ('Bachelor of Missiology (BMis)', 'Bachelor of Missiology (BMis)'), ('Master of Divinity (MDiv)', 'Master of Divinity (MDiv)'), ('Master of Theology (ThM)', 'Master of Theology (ThM)'), ('Master of Biblical Studies (MBS)', 'Master of Biblical Studies (MBS)'), ('Master of Ministry (MMin)', 'Master of Ministry (MMin)'), ('Master of Christian Counseling (MCC)', 'Master of Christian Counseling (MCC)'), ('Master of Apologetics (MAp)', 'Master of Apologetics (MAp)'), ('Master of Missiology (MMis)', 'Master of Missiology (MMis)'), ('Doctor of Theology (ThD)', 'Doctor of Theology (ThD)'), ('Doctor of Ministry (DMin)', 'Doctor of Ministry (DMin)'), ('Doctor of Philosophy in Religious Studies (PhD)', 'Doctor of Philosophy in Religious Studies (PhD)'), ('Doctor of Apologetics (DAp)', 'Doctor of Apologetics (DAp)'), ('Doctor of Missiology (DMis)', 'Doctor of Missiology (DMis)'), ('Diploma in Pastoral Ministry', 'Diploma in Pastoral Ministry'), ('Diploma in Biblical Studies', 'Diploma in Biblical Studies'), ('Diploma in Christian Counseling', 'Diploma in Christian Counseling'), ('Diploma in Apologetics', 'Diploma in Apologetics'), ('Diploma in Missiology', 'Diploma in Missiology'), ('Certificate in Pastoral Ministry', 'Certificate in Pastoral Ministry'), ('Certificate in Biblical Studies', 'Certificate in Biblical Studies'), ('Certificate in Christian Counseling', 'Certificate in Christian Counseling'), ('Certificate in Apologetics', 'Certificate in Apologetics'), ('Certificate in Missiology', 'Certificate in Missiology'), ('Associate Degree in Biblical Studies', 'Associate Degree in Biblical Studies'), ('Associate Degree in Ministry', 'Associate Degree in Ministry'), ('Associate Degree in Religious Studies', 'Associate Degree in Religious Studies'), ('Associate Degree in Christian Counseling', 'Associate Degree in Christian Counseling')], max_length=255, verbose_name='Program Name')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('org_name', models.CharField(db_index=True, max_length=100, verbose_name='Organization Name')),
                ('org_phone_number', models.CharField(blank=True, max_length=20, null=True, unique=True, validators=[validators.user_validators.validate_phone_number], verbose_name='Phone Number')),
                ('denominations_type', models.CharField(choices=[('lutheranism', 'Lutheranism'), ('calvinism_or_reformed', 'Calvinism or Reformed'), ('anglicanism', 'Anglicanism'), ('methodism', 'Methodism'), ('baptism', 'Baptism'), ('presbyterianism', 'Presbyterianism'), ('pentecostalism', 'Pentecostalism'), ('adventism', 'Adventism'), ('anabaptism', 'Anabaptism'), ('congregationalism', 'Congregationalism'), ('roman_catholicism', 'Roman Catholicism'), ('eastern_catholic_churches', 'Eastern Catholic Churches'), ('eastern_orthodoxy', 'Eastern Orthodoxy'), ('oriental_Orthodoxy', 'Oriental Orthodoxy'), ('church_of_the_East', 'Church of the East')], max_length=40, verbose_name='Denominations Type')),
                ('primary_language', models.CharField(choices=[('en', 'English'), ('af', 'Afrikaans'), ('sq', 'Albanian'), ('am', 'Amharic'), ('ar', 'Arabic'), ('hy', 'Armenian'), ('az', 'Azerbaijani'), ('eu', 'Basque'), ('bn', 'Bengali'), ('bs', 'Bosnian'), ('bg', 'Bulgarian'), ('my', 'Burmese'), ('ca', 'Catalan'), ('zh', 'Chinese'), ('hr', 'Croatian'), ('cs', 'Czech'), ('da', 'Danish'), ('nl', 'Dutch'), ('et', 'Estonian'), ('tl', 'Filipino'), ('fi', 'Finnish'), ('fr', 'French'), ('ka', 'Georgian'), ('de', 'German'), ('el', 'Greek'), ('gu', 'Gujarati'), ('ha', 'Hausa'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hu', 'Hungarian'), ('is', 'Icelandic'), ('ig', 'Igbo'), ('id', 'Indonesian'), ('ga', 'Irish'), ('it', 'Italian'), ('ja', 'Japanese'), ('jv', 'Javanese'), ('kn', 'Kannada'), ('kk', 'Kazakh'), ('ko', 'Korean'), ('ku', 'Kurdish'), ('ky', 'Kyrgyz'), ('lo', 'Lao'), ('lv', 'Latvian'), ('lt', 'Lithuanian'), ('mk', 'Macedonian'), ('mg', 'Malagasy'), ('ms', 'Malay'), ('ml', 'Malayalam'), ('mr', 'Marathi'), ('mn', 'Mongolian'), ('ne', 'Nepali'), ('no', 'Norwegian'), ('or', 'Oriya'), ('ps', 'Pashto'), ('fa', 'Persian'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pa', 'Punjabi'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sr', 'Serbian'), ('si', 'Sinhala'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('so', 'Somali'), ('es', 'Spanish'), ('sw', 'Swahili'), ('sv', 'Swedish'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('cy', 'Welsh'), ('xh', 'Xhosa'), ('yo', 'Yoruba'), ('zu', 'Zulu'), ('other', 'Other')], default='en', max_length=5, verbose_name='Primary Language')),
                ('secondary_language', models.CharField(blank=True, choices=[('en', 'English'), ('af', 'Afrikaans'), ('sq', 'Albanian'), ('am', 'Amharic'), ('ar', 'Arabic'), ('hy', 'Armenian'), ('az', 'Azerbaijani'), ('eu', 'Basque'), ('bn', 'Bengali'), ('bs', 'Bosnian'), ('bg', 'Bulgarian'), ('my', 'Burmese'), ('ca', 'Catalan'), ('zh', 'Chinese'), ('hr', 'Croatian'), ('cs', 'Czech'), ('da', 'Danish'), ('nl', 'Dutch'), ('et', 'Estonian'), ('tl', 'Filipino'), ('fi', 'Finnish'), ('fr', 'French'), ('ka', 'Georgian'), ('de', 'German'), ('el', 'Greek'), ('gu', 'Gujarati'), ('ha', 'Hausa'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hu', 'Hungarian'), ('is', 'Icelandic'), ('ig', 'Igbo'), ('id', 'Indonesian'), ('ga', 'Irish'), ('it', 'Italian'), ('ja', 'Japanese'), ('jv', 'Javanese'), ('kn', 'Kannada'), ('kk', 'Kazakh'), ('ko', 'Korean'), ('ku', 'Kurdish'), ('ky', 'Kyrgyz'), ('lo', 'Lao'), ('lv', 'Latvian'), ('lt', 'Lithuanian'), ('mk', 'Macedonian'), ('mg', 'Malagasy'), ('ms', 'Malay'), ('ml', 'Malayalam'), ('mr', 'Marathi'), ('mn', 'Mongolian'), ('ne', 'Nepali'), ('no', 'Norwegian'), ('or', 'Oriya'), ('ps', 'Pashto'), ('fa', 'Persian'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pa', 'Punjabi'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sr', 'Serbian'), ('si', 'Sinhala'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('so', 'Somali'), ('es', 'Spanish'), ('sw', 'Swahili'), ('sv', 'Swedish'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('cy', 'Welsh'), ('xh', 'Xhosa'), ('yo', 'Yoruba'), ('zu', 'Zulu'), ('other', 'Other')], max_length=5, null=True, verbose_name='Secondary Language')),
                ('is_branch', models.BooleanField(default=False, verbose_name='Is Branch')),
                ('history', models.TextField(blank=True, null=True, verbose_name='History')),
                ('belief', models.TextField(blank=True, null=True, verbose_name='Letter of Beleif')),
                ('statement_of_purpose', models.TextField(blank=True, null=True, verbose_name='Statement of Purpose')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description of Organization')),
                ('volunteer_opportunities', models.TextField(blank=True, null=True, verbose_name='Volunteer Opportunities')),
                ('license_document', models.FileField(blank=True, null=True, upload_to=utils.common.utils.FileUpload.dir_upload, validators=[validators.mediaValidators.pdf_validators.validate_pdf_file, validators.security_validators.validate_no_executable_file], verbose_name='License Document')),
                ('license_expiry_date', models.DateField(blank=True, null=True, verbose_name='License Expiry Date')),
                ('logo', models.ImageField(default='media/sample/logo.png', upload_to=utils.common.utils.FileUpload.dir_upload, validators=[validators.mediaValidators.image_validators.validate_image_file, validators.mediaValidators.image_validators.validate_image_size, validators.security_validators.validate_no_executable_file], verbose_name='Logo')),
                ('opt_in_newsletters_emails', models.BooleanField(default=True, verbose_name='Opt-in for Newsletters Emails')),
                ('timezone_preference', models.CharField(choices=[('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Asmera', 'Africa/Asmera'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Timbuktu', 'Africa/Timbuktu'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/ComodRivadavia', 'America/Argentina/ComodRivadavia'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Atka', 'America/Atka'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Buenos_Aires', 'America/Buenos_Aires'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Catamarca', 'America/Catamarca'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Ciudad_Juarez', 'America/Ciudad_Juarez'), ('America/Coral_Harbour', 'America/Coral_Harbour'), ('America/Cordoba', 'America/Cordoba'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Ensenada', 'America/Ensenada'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fort_Wayne', 'America/Fort_Wayne'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Godthab', 'America/Godthab'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Indianapolis', 'America/Indianapolis'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Jujuy', 'America/Jujuy'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Knox_IN', 'America/Knox_IN'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Louisville', 'America/Louisville'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Mendoza', 'America/Mendoza'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montreal', 'America/Montreal'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nipigon', 'America/Nipigon'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Nuuk', 'America/Nuuk'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Pangnirtung', 'America/Pangnirtung'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Acre', 'America/Porto_Acre'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rainy_River', 'America/Rainy_River'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Rosario', 'America/Rosario'), ('America/Santa_Isabel', 'America/Santa_Isabel'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Shiprock', 'America/Shiprock'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Thunder_Bay', 'America/Thunder_Bay'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Virgin', 'America/Virgin'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('America/Yellowknife', 'America/Yellowknife'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/South_Pole', 'Antarctica/South_Pole'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Ashkhabad', 'Asia/Ashkhabad'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Calcutta', 'Asia/Calcutta'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Choibalsan', 'Asia/Choibalsan'), ('Asia/Chongqing', 'Asia/Chongqing'), ('Asia/Chungking', 'Asia/Chungking'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Dacca', 'Asia/Dacca'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Harbin', 'Asia/Harbin'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Istanbul', 'Asia/Istanbul'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kashgar', 'Asia/Kashgar'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Katmandu', 'Asia/Katmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macao', 'Asia/Macao'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qostanay', 'Asia/Qostanay'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Rangoon', 'Asia/Rangoon'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Saigon', 'Asia/Saigon'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Tel_Aviv', 'Asia/Tel_Aviv'), ('Asia/Thimbu', 'Asia/Thimbu'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ujung_Pandang', 'Asia/Ujung_Pandang'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Ulan_Bator', 'Asia/Ulan_Bator'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faeroe', 'Atlantic/Faeroe'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Jan_Mayen', 'Atlantic/Jan_Mayen'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/ACT', 'Australia/ACT'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Canberra', 'Australia/Canberra'), ('Australia/Currie', 'Australia/Currie'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/LHI', 'Australia/LHI'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/NSW', 'Australia/NSW'), ('Australia/North', 'Australia/North'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Queensland', 'Australia/Queensland'), ('Australia/South', 'Australia/South'), ('Australia/Sydney', 'Australia/Sydney'), ('Australia/Tasmania', 'Australia/Tasmania'), ('Australia/Victoria', 'Australia/Victoria'), ('Australia/West', 'Australia/West'), ('Australia/Yancowinna', 'Australia/Yancowinna'), ('Brazil/Acre', 'Brazil/Acre'), ('Brazil/DeNoronha', 'Brazil/DeNoronha'), ('Brazil/East', 'Brazil/East'), ('Brazil/West', 'Brazil/West'), ('CET', 'CET'), ('CST6CDT', 'CST6CDT'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Canada/Saskatchewan', 'Canada/Saskatchewan'), ('Canada/Yukon', 'Canada/Yukon'), ('Chile/Continental', 'Chile/Continental'), ('Chile/EasterIsland', 'Chile/EasterIsland'), ('Cuba', 'Cuba'), ('EET', 'EET'), ('EST', 'EST'), ('EST5EDT', 'EST5EDT'), ('Egypt', 'Egypt'), ('Eire', 'Eire'), ('Etc/GMT', 'Etc/GMT'), ('Etc/GMT+0', 'Etc/GMT+0'), ('Etc/GMT+1', 'Etc/GMT+1'), ('Etc/GMT+10', 'Etc/GMT+10'), ('Etc/GMT+11', 'Etc/GMT+11'), ('Etc/GMT+12', 'Etc/GMT+12'), ('Etc/GMT+2', 'Etc/GMT+2'), ('Etc/GMT+3', 'Etc/GMT+3'), ('Etc/GMT+4', 'Etc/GMT+4'), ('Etc/GMT+5', 'Etc/GMT+5'), ('Etc/GMT+6', 'Etc/GMT+6'), ('Etc/GMT+7', 'Etc/GMT+7'), ('Etc/GMT+8', 'Etc/GMT+8'), ('Etc/GMT+9', 'Etc/GMT+9'), ('Etc/GMT-0', 'Etc/GMT-0'), ('Etc/GMT-1', 'Etc/GMT-1'), ('Etc/GMT-10', 'Etc/GMT-10'), ('Etc/GMT-11', 'Etc/GMT-11'), ('Etc/GMT-12', 'Etc/GMT-12'), ('Etc/GMT-13', 'Etc/GMT-13'), ('Etc/GMT-14', 'Etc/GMT-14'), ('Etc/GMT-2', 'Etc/GMT-2'), ('Etc/GMT-3', 'Etc/GMT-3'), ('Etc/GMT-4', 'Etc/GMT-4'), ('Etc/GMT-5', 'Etc/GMT-5'), ('Etc/GMT-6', 'Etc/GMT-6'), ('Etc/GMT-7', 'Etc/GMT-7'), ('Etc/GMT-8', 'Etc/GMT-8'), ('Etc/GMT-9', 'Etc/GMT-9'), ('Etc/GMT0', 'Etc/GMT0'), ('Etc/Greenwich', 'Etc/Greenwich'), ('Etc/UCT', 'Etc/UCT'), ('Etc/UTC', 'Etc/UTC'), ('Etc/Universal', 'Etc/Universal'), ('Etc/Zulu', 'Etc/Zulu'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belfast', 'Europe/Belfast'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Kyiv', 'Europe/Kyiv'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Nicosia', 'Europe/Nicosia'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Tiraspol', 'Europe/Tiraspol'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Uzhgorod', 'Europe/Uzhgorod'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zaporozhye', 'Europe/Zaporozhye'), ('Europe/Zurich', 'Europe/Zurich'), ('GB', 'GB'), ('GB-Eire', 'GB-Eire'), ('GMT', 'GMT'), ('GMT+0', 'GMT+0'), ('GMT-0', 'GMT-0'), ('GMT0', 'GMT0'), ('Greenwich', 'Greenwich'), ('HST', 'HST'), ('Hongkong', 'Hongkong'), ('Iceland', 'Iceland'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Iran', 'Iran'), ('Israel', 'Israel'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Kwajalein', 'Kwajalein'), ('Libya', 'Libya'), ('MET', 'MET'), ('MST', 'MST'), ('MST7MDT', 'MST7MDT'), ('Mexico/BajaNorte', 'Mexico/BajaNorte'), ('Mexico/BajaSur', 'Mexico/BajaSur'), ('Mexico/General', 'Mexico/General'), ('NZ', 'NZ'), ('NZ-CHAT', 'NZ-CHAT'), ('Navajo', 'Navajo'), ('PRC', 'PRC'), ('PST8PDT', 'PST8PDT'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Enderbury', 'Pacific/Enderbury'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Johnston', 'Pacific/Johnston'), ('Pacific/Kanton', 'Pacific/Kanton'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Ponape', 'Pacific/Ponape'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Samoa', 'Pacific/Samoa'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Truk', 'Pacific/Truk'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('Pacific/Yap', 'Pacific/Yap'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('ROC', 'ROC'), ('ROK', 'ROK'), ('Singapore', 'Singapore'), ('Turkey', 'Turkey'), ('UCT', 'UCT'), ('US/Alaska', 'US/Alaska'), ('US/Aleutian', 'US/Aleutian'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/East-Indiana', 'US/East-Indiana'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Indiana-Starke', 'US/Indiana-Starke'), ('US/Michigan', 'US/Michigan'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('US/Samoa', 'US/Samoa'), ('UTC', 'UTC'), ('Universal', 'Universal'), ('W-SU', 'W-SU'), ('WET', 'WET'), ('Zulu', 'Zulu')], max_length=100, verbose_name='Timezone Preference')),
                ('register_date', models.DateField(default=django.utils.timezone.now, verbose_name='Register Date')),
                ('last_notified', models.DateTimeField(blank=True, null=True)),
                ('is_suspended', models.BooleanField(default=False, verbose_name='Is Suspended')),
                ('reports_count', models.IntegerField(default=0, verbose_name='Reports Count')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
                ('verified_date', models.DateField(blank=True, null=True, verbose_name='Verified Date')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('deletion_requested_at', models.DateTimeField(blank=True, null=True, verbose_name='Deletion Requested At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': '1. Organization',
                'verbose_name_plural': '1. Organization',
            },
        ),
        migrations.CreateModel(
            name='OrganizationService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('addiction_recovery', 'Addiction Recovery'), ('bible_study', 'Bible Study'), ('chaplaincy_services', 'Chaplaincy Services'), ('children_services', 'Children Services'), ('christian_broadcasting', 'Christian Broadcasting'), ('christian_camps', 'Christian Camps'), ('christian_hospital', 'Christian Hospital'), ('christian_legal_services', 'Christian Legal Services'), ('christian_music', 'Christian Music'), ('christian_schools', 'Christian Schools'), ('christian_university', 'Christian University'), ('church_services', 'Church Services'), ('community_centers', 'Community Centers'), ('counseling_services', 'Counseling Services'), ('development_programs', 'Development Programs'), ('disability_ministries', 'Disability Ministries'), ('disaster_relief', 'Disaster Relief'), ('drama_and_theater', 'Drama and Theater'), ('elderly_care', 'Elderly Care'), ('environmental_stewardship', 'Environmental Stewardship'), ('evangelistic_campaigns', 'Evangelistic Campaigns'), ('family_retreats', 'Family Retreats'), ('food_banks', 'Food Banks'), ('health_clinic', 'Health Clinic'), ('homeless_shelters', 'Homeless Shelters'), ('human_rights_advocacy', 'Human Rights Advocacy'), ('international_missions', 'International Missions'), ('interfaith_dialogues', 'Interfaith Dialogues'), ('job_training', 'Job Training'), ('local_missions', 'Local Missions'), ('marriage_counseling', 'Marriage Counseling'), ('medical_mission', 'Medical Mission'), ('mens_ministries', "Men's Ministries"), ('mental_health_ministries', 'Mental Health Ministries'), ('online_ministries', 'Online Ministries'), ('orphanage', 'Orphanage'), ('parenting_classes', 'Parenting Classes'), ('publishing', 'Publishing'), ('prayer_meetings', 'Prayer Meetings'), ('refugee_assistance', 'Refugee Assistance'), ('sunday_school', 'Sunday School'), ('sports_ministries', 'Sports Ministries'), ('theological_education', 'Theological Education'), ('vacation_bible_school', 'Vacation Bible School'), ('visual_arts', 'Visual Arts'), ('womens_ministries', "Women's Ministries"), ('worship_concerts', 'Worship Concerts'), ('youth_services', 'Youth Services')], max_length=50, unique=True, verbose_name='Organization Service')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Organization Service Category',
                'verbose_name_plural': 'Organization Service Categories',
            },
        ),
        migrations.CreateModel(
            name='WorshipStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('traditional', 'Traditional'), ('contemporary', 'Contemporary'), ('gospel', 'Gospel'), ('hymnal', 'Hymnal'), ('charismatic', 'Charismatic'), ('liturgical', 'Liturgical'), ('acoustic', 'Acoustic'), ('rock', 'Rock'), ('electronic', 'Electronic'), ('choral', 'Choral'), ('spontaneous', 'Spontaneous'), ('instrumental', 'Instrumental'), ('meditative', 'Meditative'), ('blended', 'Blended'), ('african_gospel', 'African Gospel'), ('latin_american', 'Latin American'), ('caribbean', 'Caribbean'), ('celtic', 'Celtic'), ('native_american', 'Native American'), ('asian_fusion', 'Asian Fusion'), ('reggae', 'Reggae'), ('hip_hop', 'Hip-Hop'), ('folk', 'Folk'), ('jazz', 'Jazz')], max_length=100, unique=True, verbose_name='Worship Style Name')),
            ],
        ),
        migrations.CreateModel(
            name='VotingHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('voting_type', models.CharField(choices=[('owner_addition', 'Owner Addition'), ('owner_removal', 'Owner Removal'), ('admin_replacement', 'Admin Replacement'), ('deletion', 'Deletion'), ('restoration', 'Restoration'), ('withdrawal', 'Owner Withdrawal')], max_length=50, verbose_name='Voting Type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('result', models.CharField(blank=True, choices=[('approved', 'Approved'), ('rejected', 'Rejected')], max_length=50, null=True, verbose_name='Result')),
                ('total_votes', models.IntegerField(default=0, verbose_name='Total Votes')),
                ('votes_required', models.IntegerField(verbose_name='Votes Required')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('non_voted_users', models.ManyToManyField(related_name='non_voted_in_history', to='profiles.member', verbose_name='Non-voted Users')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voting_histories', to='profilesOrg.organization', verbose_name='Organization')),
                ('voted_users', models.ManyToManyField(related_name='voted_in_history', to='profiles.member', verbose_name='Voted Users')),
            ],
            options={
                'verbose_name': 'Voting History',
                'verbose_name_plural': 'Voting Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('service_type', models.CharField(choices=[('Church', 'Church'), ('Mission Organization', 'Mission Organization'), ('Christian Publishing House', 'Christian Publishing House'), ('Christian Counseling Center', 'Christian Counseling Center'), ('Christian Worship Ministry', 'Christian Worship Ministry'), ('Christian Conference Center', 'Christian Conference Center'), ('Christian School, University or Bible College', 'Christian School, University or Bible College'), ('Christian Children’s Organization', 'Christian Children’s Organization'), ('Christian Youth Organization', 'Christian Youth Organization'), ('Christian Women’s Organization', 'Christian Women’s Organization'), ('Christian Men’s Organization', 'Christian Men’s Organization'), ('Store', 'Store')], max_length=50, verbose_name='Service Type')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('organizations', models.ManyToManyField(related_name='service_relations', to='profilesOrg.organization', verbose_name='Organizations')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='OrganizationManager',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('is_approved', models.BooleanField(default=False, verbose_name='Is Approved')),
                ('access_level', models.CharField(choices=[('full_access', 'Full Access'), ('limited_access', 'Limited Access')], max_length=15, verbose_name='Access Level')),
                ('is_being_replaced', models.BooleanField(default=False, verbose_name='Is Being Replaced')),
                ('register_date', models.DateField(default=django.utils.timezone.now, verbose_name='Register Date')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_adminships', to='profiles.member', verbose_name='Member')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_relationships', to='profilesOrg.organization', verbose_name='Organization')),
            ],
            options={
                'verbose_name': 'Organization Manager',
                'verbose_name_plural': 'Organization Managers',
                'unique_together': {('organization', 'member')},
            },
        ),
        migrations.AddField(
            model_name='organization',
            name='admins',
            field=models.ManyToManyField(related_name='admin_organizations', through='profilesOrg.OrganizationManager', to='profiles.member', verbose_name='Admins'),
        ),
        migrations.AddField(
            model_name='organization',
            name='branch_parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='organization_branch', to='profilesOrg.organization', verbose_name='Branch of Organization'),
        ),
        migrations.AddField(
            model_name='organization',
            name='counselors',
            field=models.ManyToManyField(blank=True, related_name='organization_counselors', to='profiles.member', verbose_name='Counselors'),
        ),
        migrations.AddField(
            model_name='organization',
            name='evangelists',
            field=models.ManyToManyField(blank=True, related_name='organization_evangelists', to='profiles.member', verbose_name='Evangelists'),
        ),
        migrations.AddField(
            model_name='organization',
            name='leaders',
            field=models.ManyToManyField(blank=True, related_name='organization_leaders', to='profiles.member', verbose_name='Leaders'),
        ),
        migrations.AddField(
            model_name='organization',
            name='new_owner_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pending_organization_ownership', to='profiles.member', verbose_name='New Owner Request'),
        ),
        migrations.AddField(
            model_name='organization',
            name='org_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='organization_address', to='accounts.address', verbose_name='Organization Address'),
        ),
        migrations.AddField(
            model_name='organization',
            name='org_owners',
            field=models.ManyToManyField(related_name='organization_owners', to='profiles.member', verbose_name='Organization Owner/Owners'),
        ),
        migrations.AddField(
            model_name='organization',
            name='organization_services',
            field=models.ManyToManyField(to='profilesOrg.organizationservice', verbose_name='Organization Services'),
        ),
        migrations.AddField(
            model_name='organization',
            name='owner_removal_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pending_organization_removal', to='profiles.member', verbose_name='Owner Removal Request'),
        ),
        migrations.AddField(
            model_name='organization',
            name='owner_withdrawal_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pending_owner_withdrawal', to='profiles.member', verbose_name='Owner Withdrawal Request'),
        ),
        migrations.AddField(
            model_name='organization',
            name='proposed_admin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposed_admin_for_orgs', to='profiles.member', verbose_name='Proposed New Admin'),
        ),
        migrations.AddField(
            model_name='organization',
            name='services',
            field=models.ManyToManyField(blank=True, related_name='organization_services', to='profilesOrg.service', verbose_name='Services'),
        ),
        migrations.AddField(
            model_name='organization',
            name='voting_history',
            field=models.ManyToManyField(blank=True, related_name='voted_organizations', to='profilesOrg.votinghistory', verbose_name='Voting History'),
        ),
        migrations.CreateModel(
            name='MissionOrganization',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('mission_focus_areas', models.TextField(blank=True, null=True, verbose_name='Mission Focus Areas')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mission_organization_details', to='profilesOrg.organization', verbose_name='Mission Organization Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_mission_org', to='profilesOrg.organization', verbose_name='Partner Organizations')),
            ],
            options={
                'verbose_name': 'Mission Organization',
                'verbose_name_plural': 'Mission Organizations',
            },
        ),
        migrations.CreateModel(
            name='CounselingService',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('service_name', models.CharField(choices=[('marriage_counseling', 'Marriage Counseling'), ('family_counseling', 'Family Counseling'), ('individual_counseling', 'Individual Counseling'), ('premarital_counseling', 'Premarital Counseling'), ('spiritual_counseling', 'Spiritual Counseling'), ('psychological_counseling', 'Psychological Counseling'), ('group_counseling', 'Group Counseling'), ('grief_counseling', 'Grief Counseling'), ('addiction_counseling', 'Addiction Counseling'), ('crisis_counseling', 'Crisis Counseling'), ('career_counseling', 'Career Counseling'), ('academic_counseling', 'Academic Counseling')], max_length=50, verbose_name='Service Name')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Description')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Session Duration')),
                ('fee_type', models.CharField(choices=[('Free', 'Free'), ('Paid', 'Paid')], max_length=10, verbose_name='Fee Type')),
                ('availability', models.CharField(choices=[('online', 'Online'), ('inperson', 'In-Person'), ('hybrid', 'Hybrid')], max_length=10, verbose_name='Availability')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('counselors', models.ManyToManyField(blank=True, related_name='counseling_services', to='profiles.member')),
            ],
            options={
                'verbose_name': 'Counseling Service',
                'verbose_name_plural': 'Counseling Services',
            },
        ),
        migrations.CreateModel(
            name='Church',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('assistant_pastors', models.ManyToManyField(blank=True, related_name='church_assistant_pastors', to='profiles.member', verbose_name='Church Assistant Pastors')),
                ('deacons', models.ManyToManyField(blank=True, related_name='church_deacons', to='profiles.member', verbose_name='Church Deacons')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='church_details', to='profilesOrg.organization', verbose_name='Church Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_church', to='profilesOrg.organization', verbose_name='Partner Organizations')),
                ('pastors', models.ManyToManyField(blank=True, related_name='church_pastors', to='profiles.member', verbose_name='Church Pastors')),
                ('senior_pastors', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='church_senior_pastors', to='profiles.member', verbose_name='Church Senior Pastors')),
                ('teachers', models.ManyToManyField(blank=True, related_name='church_teachers', to='profiles.member', verbose_name='Church Teachers')),
                ('worship_leaders', models.ManyToManyField(blank=True, related_name='church_worship_leaders', to='profiles.member', verbose_name='Church Worship Leaders')),
            ],
            options={
                'verbose_name': 'Church',
                'verbose_name_plural': 'Churchs',
            },
        ),
        migrations.CreateModel(
            name='ChristianYouthOrganization',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('service_delivery_method', models.CharField(blank=True, choices=[('online', 'Online'), ('inperson', 'In-Person'), ('hybrid', 'Hybrid')], max_length=10, null=True, verbose_name='Service Delivery Method')),
                ('mentorship_programs', models.TextField(blank=True, null=True, verbose_name='Mentorship Programs')),
                ('volunteer_opportunities', models.TextField(blank=True, null=True, verbose_name='Volunteer Opportunities')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('assistant_pastors', models.ManyToManyField(blank=True, related_name='youth_assistant_pastors', to='profiles.member', verbose_name='Youth Assistant Pastors')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_youth_organization_details', to='profilesOrg.organization', verbose_name='Christian Youth Organization Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_youth_orgs', to='profilesOrg.organization', verbose_name='Partner Organizations')),
                ('pastors', models.ManyToManyField(blank=True, related_name='youth_pastors', to='profiles.member', verbose_name='Youth Pastors')),
                ('teachers', models.ManyToManyField(blank=True, related_name='youth_teachers', to='profiles.member', verbose_name='Youth Teachers')),
                ('youth_centers', models.ManyToManyField(blank=True, related_name='youth_centers', to='accounts.address', verbose_name='Youth Centers')),
            ],
            options={
                'verbose_name': 'Christian Youth Organization',
                'verbose_name_plural': 'Christian Youth Organizations',
            },
        ),
        migrations.CreateModel(
            name='ChristianWorshipMinistry',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_worship_ministry_details', to='profilesOrg.organization', verbose_name='Christian Worship Ministry Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_worship_ministry', to='profilesOrg.organization', verbose_name='Partner Organizations')),
                ('worship_leaders', models.ManyToManyField(blank=True, related_name='organization_worship_leaders', to='profiles.member', verbose_name='Worship Leaders')),
                ('worship_styles', models.ManyToManyField(blank=True, related_name='worship_ministries', to='profilesOrg.worshipstyle', verbose_name='Worship Styles')),
                ('worship_team', models.ManyToManyField(blank=True, related_name='worship_team_members', to='profiles.member', verbose_name='Worship Team')),
            ],
            options={
                'verbose_name': 'Christian Worship Ministry',
                'verbose_name_plural': 'Christian Worship Ministries',
            },
        ),
        migrations.CreateModel(
            name='ChristianWomensOrganization',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('service_delivery_method', models.CharField(blank=True, choices=[('online', 'Online'), ('inperson', 'In-Person'), ('hybrid', 'Hybrid')], max_length=10, null=True, verbose_name='Service Delivery Method')),
                ('mentorship_programs', models.TextField(blank=True, null=True, verbose_name='Mentorship Programs')),
                ('volunteer_opportunities', models.TextField(blank=True, null=True, verbose_name='Volunteer Opportunities')),
                ('emergency_support', models.BooleanField(default=False, verbose_name='Emergency Support Available')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('assistant_pastors', models.ManyToManyField(blank=True, related_name='women_assistant_pastors', to='profiles.member', verbose_name='Women Assistant Pastors')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_womens_organization_details', to='profilesOrg.organization', verbose_name='Christian Womens Organization Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_women_orgs', to='profilesOrg.organization', verbose_name='Partner Organizations')),
                ('pastors', models.ManyToManyField(blank=True, related_name='women_pastors', to='profiles.member', verbose_name='Women Pastors')),
                ('women_centers', models.ManyToManyField(blank=True, related_name='women_centers', to='accounts.address', verbose_name='Women Centers')),
            ],
            options={
                'verbose_name': "Christian Women's Organization",
                'verbose_name_plural': "Christian Women's Organizations",
            },
        ),
        migrations.CreateModel(
            name='ChristianPublishingHouse',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('authors', models.ManyToManyField(blank=True, related_name='publishing_house_authors', to=settings.AUTH_USER_MODEL, verbose_name='Publishing House Authors')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_publishing_house_details', to='profilesOrg.organization', verbose_name='Christian Publishing House Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_publishing_house', to='profilesOrg.organization', verbose_name='Partner Organizations')),
            ],
            options={
                'verbose_name': 'Christian Publishing House',
                'verbose_name_plural': 'Christian Publishing Houses',
            },
        ),
        migrations.CreateModel(
            name='ChristianMensOrganization',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('service_delivery_method', models.CharField(blank=True, choices=[('online', 'Online'), ('inperson', 'In-Person'), ('hybrid', 'Hybrid')], max_length=10, null=True, verbose_name='Service Delivery Method')),
                ('mentorship_programs', models.TextField(blank=True, null=True, verbose_name='Mentorship Programs')),
                ('volunteer_opportunities', models.TextField(blank=True, null=True, verbose_name='Volunteer Opportunities')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('assistant_pastors', models.ManyToManyField(blank=True, related_name='men_assistant_pastors', to='profiles.member', verbose_name='Men Assistant Pastors')),
                ('men_centers', models.ManyToManyField(blank=True, related_name='men_centers', to='accounts.address', verbose_name='Men Centers')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_mens_organization_details', to='profilesOrg.organization', verbose_name='Christian Mens Organization Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_men_orgs', to='profilesOrg.organization', verbose_name='Partner Organizations')),
                ('pastors', models.ManyToManyField(blank=True, related_name='men_pastors', to='profiles.member', verbose_name='Men Pastors')),
            ],
            options={
                'verbose_name': "Christian Men's Organization",
                'verbose_name_plural': "Christian Men's Organizations",
            },
        ),
        migrations.CreateModel(
            name='ChristianEducationalInstitution',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('institution_type', models.CharField(choices=[('school', 'School'), ('university', 'University'), ('bible_college', 'Bible College')], max_length=50, verbose_name='Institution Type')),
                ('delivery_method', models.CharField(choices=[('online', 'Online'), ('inperson', 'In-Person'), ('hybrid', 'Hybrid')], max_length=10, verbose_name='Delivery Method')),
                ('out_town_faculty', models.CharField(blank=True, max_length=200, null=True, verbose_name='Faculty out TownLIT')),
                ('accreditation', models.CharField(blank=True, max_length=255, null=True, verbose_name='Accreditation')),
                ('admission_requirements', models.TextField(blank=True, null=True, verbose_name='Admission Requirements')),
                ('degree_types', models.CharField(blank=True, choices=[('Bachelor of Theology (BTh)', 'Bachelor of Theology (BTh)'), ('Master of Divinity (MDiv)', 'Master of Divinity (MDiv)'), ('Doctor of Theology (ThD)', 'Doctor of Theology (ThD)'), ('Bachelor of Arts (BA)', 'Bachelor of Arts (BA)'), ('Master of Science (MSc)', 'Master of Science (MSc)'), ('Doctor of Philosophy (PhD)', 'Doctor of Philosophy (PhD)'), ('Diploma in Pastoral Ministry', 'Diploma in Pastoral Ministry'), ('Associate Degree in Biblical Studies', 'Associate Degree in Biblical Studies'), ('Advanced Diploma in Christian Counseling', 'Advanced Diploma in Christian Counseling'), ('Postgraduate Certificate in Religious Studies', 'Postgraduate Certificate in Religious Studies')], max_length=100, null=True, verbose_name='Degree Types')),
                ('scholarships_available', models.BooleanField(default=False, verbose_name='Scholarships Available')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('campus_locations', models.ManyToManyField(blank=True, related_name='campuses', to='accounts.address', verbose_name='Campus Locations')),
                ('in_town_faculty', models.ManyToManyField(blank=True, related_name='faculty_members', to='profiles.member', verbose_name='Faculty in TownLIT')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_educational_institution_details', to='profilesOrg.organization', verbose_name='Christian Educational Institution Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_christian_educational_institution', to='profilesOrg.organization', verbose_name='Partner Organizations')),
                ('programs_offered', models.ManyToManyField(blank=True, related_name='offered_by_institutions', to='profilesOrg.educationprogram', verbose_name='Programs Offered')),
            ],
            options={
                'verbose_name': 'Christian Educational Institution',
                'verbose_name_plural': 'Christian Educational Institutions',
            },
        ),
        migrations.CreateModel(
            name='ChristianCounselingCenter',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('confidentiality_policy', models.TextField(blank=True, null=True, verbose_name='Confidentiality Policy')),
                ('counseling_methods', models.CharField(choices=[('online', 'Online'), ('inperson', 'In-Person'), ('hybrid', 'Hybrid')], max_length=100, verbose_name='Counseling Methods')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('counseling_services', models.ManyToManyField(blank=True, related_name='counseling_services', to='profilesOrg.counselingservice', verbose_name='Counseling Services')),
                ('counselors', models.ManyToManyField(blank=True, related_name='counseling_center_counselors', to='profiles.member', verbose_name='Counselors')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_counseling_center_details', to='profilesOrg.organization', verbose_name='Christian Counseling Center Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_counseling_center', to='profilesOrg.organization', verbose_name='Partner Organizations')),
                ('testimonials', models.ManyToManyField(blank=True, related_name='counseling_testimonials', to='posts.testimony', verbose_name='Counseling Testimonials')),
            ],
            options={
                'verbose_name': 'Christian Counseling Center',
                'verbose_name_plural': 'Christian Counseling Centers',
            },
        ),
        migrations.CreateModel(
            name='ChristianConferenceCenter',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_conference_center_details', to='profilesOrg.organization', verbose_name='Christian Conference Center Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_christian_conference_center', to='profilesOrg.organization', verbose_name='Partner Organizations')),
            ],
            options={
                'verbose_name': 'Christian Conference Center',
                'verbose_name_plural': 'Christian Conference Centers',
            },
        ),
        migrations.CreateModel(
            name='ChristianChildrenOrganization',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('custom_service_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Custom Service Name')),
                ('service_delivery_method', models.CharField(blank=True, choices=[('online', 'Online'), ('inperson', 'In-Person'), ('hybrid', 'Hybrid')], max_length=10, null=True, verbose_name='Service Delivery Method')),
                ('volunteer_opportunities', models.TextField(blank=True, null=True, verbose_name='Volunteer Opportunities')),
                ('emergency_support', models.BooleanField(default=False, verbose_name='Emergency Support Available')),
                ('is_restricted', models.BooleanField(default=False, verbose_name='Restricted to Members')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is Hidden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('child_care_centers', models.ManyToManyField(blank=True, related_name='care_centers_for_children', to='accounts.address', verbose_name='Child Care Centers')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='christian_children_organization_details', to='profilesOrg.organization', verbose_name='Christian Children Organization Detail')),
                ('partner_organizations', models.ManyToManyField(blank=True, related_name='partners_with_children_orgs', to='profilesOrg.organization', verbose_name='Partner Organizations')),
                ('teachers', models.ManyToManyField(blank=True, related_name='children_teachers', to='profiles.member', verbose_name='Children Teachers')),
            ],
            options={
                'verbose_name': "Christian Children's Organization",
                'verbose_name_plural': "Christian Children's Organizations",
            },
        ),
    ]
