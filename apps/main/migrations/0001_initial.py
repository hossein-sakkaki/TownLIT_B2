# Generated by Django 4.2.4 on 2025-05-26 17:27

import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import utils.common.utils
import utils.mixins.media_conversion
import validators.mediaValidators.image_validators
import validators.mediaValidators.video_validators
import validators.security_validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Question')),
                ('answer', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Answer')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQs',
            },
        ),
        migrations.CreateModel(
            name='OfficialVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('language', models.CharField(default='en', max_length=10, verbose_name='Language')),
                ('episode_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Episode Number')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='View Count')),
                ('video_file', models.FileField(upload_to=utils.common.utils.FileUpload.dir_upload, validators=[validators.mediaValidators.video_validators.validate_video_file, validators.security_validators.validate_no_executable_file], verbose_name='Video File')),
                ('thumbnail', models.FileField(upload_to=utils.common.utils.FileUpload.dir_upload, validators=[validators.mediaValidators.image_validators.validate_image_file, validators.mediaValidators.image_validators.validate_image_size, validators.security_validators.validate_no_executable_file], verbose_name='Thumbnail / Poster')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('publish_date', models.DateTimeField(verbose_name='Publish Date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='Slug')),
                ('is_converted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Official Video',
                'verbose_name_plural': 'Official Videos',
                'ordering': ['-publish_date', 'episode_number'],
            },
            bases=(utils.mixins.media_conversion.MediaConversionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SiteAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Content')),
                ('publish_date', models.DateTimeField(verbose_name='Publish Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Site Announcement',
                'verbose_name_plural': 'Site Announcements',
            },
        ),
        migrations.CreateModel(
            name='TermsAndPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy_type', models.CharField(choices=[('privacy_policy', 'Privacy Policy'), ('terms_of_service', 'Terms of Service'), ('community_guidelines', 'Community Guidelines'), ('data_usage_policy', 'Data Usage Policy'), ('content_moderation_policy', 'Content Moderation Policy'), ('copyright_policy', 'Copyright Policy'), ('dispute_resolution', 'Dispute Resolution and Arbitration'), ('vision_and_mission', 'Vision and Mission'), ('townlit_history', 'TownLIT History'), ('townlit_beliefs', 'TownLIT Beliefs'), ('terms_and_conditions', 'Terms and Conditions'), ('cookie_policy', 'Cookie Policy')], max_length=50, verbose_name='Policy Type')),
                ('display_location', models.CharField(choices=[('footer', 'Footer'), ('official', 'Official Info Page'), ('both', 'Both')], default='official', max_length=20, verbose_name='Display Location')),
                ('footer_column', models.CharField(blank=True, choices=[('left', 'Left Column'), ('right', 'Right Column')], help_text='Optional. Only applies if display location is Footer or Both.', max_length=10, null=True, verbose_name='Footer Column (optional)')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='Slug')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Content')),
                ('language', models.CharField(choices=[('en', 'English'), ('fa', 'Persian'), ('tr', 'Turkish'), ('es', 'Spanish'), ('zh', 'Chinese'), ('ar', 'Arabic'), ('ko', 'Korean'), ('fr', 'French'), ('de', 'German'), ('it', 'Italian'), ('pt', 'Portuguese'), ('ru', 'Russian'), ('ja', 'Japanese'), ('hi', 'Hindi'), ('bn', 'Bengali'), ('ur', 'Urdu'), ('id', 'Indonesian'), ('ta', 'Tamil'), ('ms', 'Malay'), ('vi', 'Vietnamese'), ('th', 'Thai')], default='en', max_length=10, verbose_name='Language')),
                ('version_number', models.CharField(default='1.0', max_length=20, verbose_name='Version Number')),
                ('requires_acceptance', models.BooleanField(default=False, verbose_name='Requires Acceptance')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Terms and Policy',
                'verbose_name_plural': 'Terms and Policies',
            },
        ),
        migrations.CreateModel(
            name='VideoCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Video Category',
                'verbose_name_plural': 'Video Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VideoViewLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_logs', to='main.officialvideo')),
            ],
            options={
                'verbose_name': 'Video View Log',
                'verbose_name_plural': 'Video View Logs',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Series Title')),
                ('description', models.TextField(blank=True, verbose_name='Series Description')),
                ('language', models.CharField(default='en', max_length=10, verbose_name='Language')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='Slug')),
                ('intro_video', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intro_for_series', to='main.officialvideo', verbose_name='Introductory Video')),
            ],
            options={
                'verbose_name': 'Video Series',
                'verbose_name_plural': 'Video Series',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Content')),
                ('screenshot', models.FileField(blank=True, null=True, upload_to=utils.common.utils.FileUpload.dir_upload, validators=[validators.mediaValidators.image_validators.validate_image_file, validators.mediaValidators.image_validators.validate_image_size, validators.security_validators.validate_no_executable_file], verbose_name='Document')),
                ('status', models.CharField(choices=[('new', 'New'), ('reviewed', 'Reviewed'), ('resolved', 'Resolved')], default='new', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('is_converted', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Feedback',
                'verbose_name_plural': 'User Feedbacks',
                'ordering': ['-created_at'],
            },
            bases=(utils.mixins.media_conversion.MediaConversionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('view', 'View'), ('edit', 'Edit'), ('delete', 'Delete')], max_length=10, verbose_name='Action Type')),
                ('object_id', models.PositiveIntegerField(verbose_name='Target Instance ID')),
                ('action_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Action Timestamp')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True, verbose_name='User Agent')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Target Model')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_logs', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Action Log',
                'verbose_name_plural': 'User Action Logs',
                'ordering': ['-action_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Prayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('content', models.TextField(verbose_name='Prayer Request')),
                ('allow_display', models.BooleanField(default=False, help_text='User consent to show this prayer')),
                ('admin_response', models.TextField(blank=True, null=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prayer_responses', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prayers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PolicyChangeHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('old_content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Old Content')),
                ('changed_at', models.DateTimeField(verbose_name='Changed At')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='change_history', to='main.termsandpolicy', verbose_name='Policy')),
            ],
            options={
                'verbose_name': 'Policy Change History',
                'verbose_name_plural': 'Policy Change Histories',
                'ordering': ['-changed_at'],
            },
        ),
        migrations.AddField(
            model_name='officialvideo',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='videos', to='main.videocategory', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='officialvideo',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='main.officialvideo', verbose_name='Parent Video (if part of a folder/season)'),
        ),
        migrations.AddField(
            model_name='officialvideo',
            name='series',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='videos', to='main.videoseries', verbose_name='Series'),
        ),
        migrations.CreateModel(
            name='UserAgreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agreed_at', models.DateTimeField(auto_now_add=True, verbose_name='Agreed At')),
                ('is_latest_agreement', models.BooleanField(default=True, verbose_name='Is Latest Agreement')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_agreements', to='main.termsandpolicy', verbose_name='Policy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agreements', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Agreement',
                'verbose_name_plural': 'User Agreements',
                'unique_together': {('user', 'policy')},
            },
        ),
    ]
