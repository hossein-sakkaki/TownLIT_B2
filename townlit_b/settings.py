"""
Django settings for townlit_b project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from cryptography.fernet import Fernet
from corsheaders.defaults import default_headers


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


ENV_FILE = os.getenv('ENV_FILE', '.env')
# load_dotenv(BASE_DIR / ENV_FILE, override=True)

load_dotenv(Path(__file__).resolve().parent / '.env', override=True)


ADMIN_E2E_DEBUG_PASSWORD = "testpassword"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")


CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'https://townlit.com']
REDIS_URL = os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/0')
SITE_URL = os.getenv("SITE_URL", "https://www.townlit.com")
EMAIL_LOGO_URL = os.getenv("EMAIL_LOGO_URL", "https://www.townlit.com")

RESET_LINK_EXPIRATION_MINUTES = int(os.getenv('RESET_LINK_EXPIRATION_MINUTES', 30))
EMAIL_CODE_EXPIRATION_MINUTES = int(os.getenv('EMAIL_CODE_EXPIRATION_MINUTES', 10))

USE_INVITE_CODE = True  # Set to False to disable invite code requirement


# Application definition

INSTALLED_APPS = [
    'daphne',               # To support ASGI
    'channels',             # Real-Time Notification
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    
    'colorfield',
    'django_admin_listfilter_dropdown',
    'ckeditor',
    'ckeditor_uploader',
    'django_celery_beat',   # Celery
    'django_cleanup.apps.CleanupConfig', # Cleanup older files
    
    # 2FA
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',

    'apps.main.apps.MainConfig',
    'apps.accounts.apps.AccountsConfig',
    'apps.profiles.apps.ProfilesConfig',
    'apps.profilesOrg.apps.ProfilesorgConfig',
    'apps.posts.apps.PostsConfig',
    'apps.sanctuary.apps.SanctuaryConfig',
    'apps.notifications.apps.NotificationsConfig',
    'apps.conversation.apps.ConversationConfig',
    'apps.communication.apps.CommunicationConfig',
    'apps.moderation.apps.ModerationConfig',
    'apps.store.apps.StoreConfig',
    'apps.products.apps.ProductsConfig',
    'apps.orders.apps.OrdersConfig',
    'apps.payment.apps.PaymentConfig',
    'apps.warehouse.apps.WarehouseConfig',
    
    # pip install django-cors-headers
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django_otp.middleware.OTPMiddleware',  # 2FA
    
    'townlit_b.middleware.media_headers.AddMediaCORSHeadersMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

]

# To active WebSocket
ASGI_APPLICATION = 'townlit_b.asgi.application'


CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000').split(',')
FRONTEND_BASE_URL = CORS_ALLOWED_ORIGINS[0]
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'True').lower() in ('true', '1', 't')
CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    'Range',
    'x-device-id',
]
CORS_EXPOSE_HEADERS = ['Content-Range', 'Accept-Ranges']

# Cookies setting ----------------------------------------------------------------------
# SESSION_COOKIE_SAMESITE = None
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = True   # برای محیط تولید
# SESSION_COOKIE_SECURE = False  # برای محیط توسعه
SESSION_COOKIE_HTTPONLY = True 
CSRF_COOKIE_SECURE = True



ROOT_URLCONF = 'townlit_b.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'townlit_b.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE', 'django.db.backends.mysql'),
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        # 'HOST': os.getenv('DATABASE_HOST', '127.0.0.1'),
        'HOST': os.getenv('DATABASE_HOST', 'mysql'),
        'PORT': os.getenv('DATABASE_PORT', '3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET NAMES 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'"
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

STATIC_ROOT = '/app/staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
DEFAULT_PROFILE_IMAGE = 'sample/user.png'





# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'accounts.CustomUser'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
    ),
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ]
}

from datetime import timedelta
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework.simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework.simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework.simplejwt.serializers.TokenRefreshSlidingSerializer",
}

# 2FA -------------------------------------------------------------------------------
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'   # Session configuration to support OTP
OTP_TOTP_ISSUER = 'TownLIT'  # Your app name that will be shown in authenticator app



# Generate and store the Fernet key as an environment variable ----------------------
FERNET_KEY = os.getenv('FERNET_KEY')
if not FERNET_KEY:
    raise ValueError("FERNET_KEY is not set in the environment")

# Google API Key ---------------------------------------------------------------------
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# Email Backend
# AWS SES Configuration ---------------------------------------------------------------
AWS_SES_ACCESS_KEY_ID = os.getenv('AWS_SES_ACCESS_KEY_ID')
AWS_SES_SECRET_ACCESS_KEY = os.getenv('AWS_SES_SECRET_ACCESS_KEY')
AWS_SES_REGION_NAME = os.getenv('AWS_SES_REGION_NAME', 'us-east-1')
AWS_SES_REGION_ENDPOINT = os.getenv('AWS_SES_REGION_ENDPOINT', 'email.us-east-1.amazonaws.com')
AWS_SES_EMAIL_FROM = os.getenv('AWS_SES_EMAIL_FROM', 'no-reply@default.com')

# Optional settings 
AWS_SES_AUTO_THROTTLE = 0.5  # Throttle for bulk emails

# AWS SNS Settings ----------------------------------------------------------------------
AWS_SNS_ACCESS_KEY_ID = os.getenv('AWS_SNS_ACCESS_KEY_ID')
AWS_SNS_SECRET_ACCESS_KEY = os.getenv('AWS_SNS_SECRET_ACCESS_KEY')
AWS_SNS_REGION = os.getenv('AWS_SNS_REGION')


# CKEditor ------------------------------------------------------------------------------
CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "photo/images/ckeditor/upload_files/"                
CKEDITOR_STORAGE_BACKEND = 'django.core.files.storage.FileSystemStorage' 

CKEDITOR_CONFIGS = {
    'default': {
        'skin': 'moono',
        'toolbar_Basic': [
            ['Source', '-', 'Bold', 'Italic']
        ],
        'toolbar_YourCustomToolbarConfig': [
            {'name': 'document', 'items': ['Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates']},
            {'name': 'clipboard', 'items': ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo']},
            {'name': 'editing', 'items': ['Find', 'Replace', '-', 'SelectAll']},
            {'name': 'forms',
             'items': ['Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button', 'ImageButton',
                       'HiddenField']},
            '/',
            {'name': 'basicstyles',
             'items': ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat']},
            {'name': 'paragraph',
             'items': ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', 'CreateDiv', '-',
                       'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl',
                       'Language']},
            {'name': 'links', 'items': ['Link', 'Unlink', 'Anchor']},
            {'name': 'insert',
             'items': ['Image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak', 'Iframe']},
            '/',
            {'name': 'styles', 'items': ['Styles', 'Format', 'Font', 'FontSize']},
            {'name': 'colors', 'items': ['TextColor', 'BGColor']},
            {'name': 'tools', 'items': ['Maximize', 'ShowBlocks']},
            {'name': 'about', 'items': ['About']},
            '/',  # put this to force next toolbar on new line
            {'name': 'yourcustomtools', 'items': [
                # put the name of your editor.ui.addButton here
                'Preview',
                'Maximize',
            ]},
        ],
        'toolbar': 'YourCustomToolbarConfig',  # put selected toolbar config here
        'tabSpaces': 4,
        'extraPlugins': ','.join([
            'uploadimage', # the upload image feature
            # your extra plugins here
            'div',
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
            # 'devtools',
            'widget',
            'lineutils',
            'clipboard',
            'dialog',
            'dialogui',
            'elementspath'
        ]),
    }
}

# Redis Celery ------------------------------------------------------------------------
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Celery Task Tracking
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_TASK_ALWAYS_EAGER = False
CELERY_ACKS_LATE = True

broker_connection_retry_on_startup = True

# FCM KEY for push Notifications ------------------------------------------------------
FCM_PRIVATE_KEY_ID = os.getenv('FCM_PRIVATE_KEY_ID')
FCM_API_KEY = os.getenv('FCM_API_KEY')

# Real-Time Notification --------------------------------------------------------------
ASGI_APPLICATION = 'townlit_b.asgi.application'



# channels_redis for Real-Time Notification -------------------------------------------
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
            "capacity": 2000,  # ← افزایش ظرفیت (پیش‌فرض 100)
            "expiry": 60 * 10,  # مدت‌زمان ذخیره‌سازی پیام‌ها
        },
    },
}


# Veriff -------------------------------------------------------------------------------
VERIFF_API_KEY = os.getenv('VERIFF_API_KEY')
VERIFF_BASE_URL = 'https://api.veriff.com/v1/'



# Fetch the master key from environment variables -------------------------------------
MASTER_KEY = os.environ.get('MASTER_KEY')

# Ensure the key is valid (Optional but recommended)
if not MASTER_KEY:
    raise ValueError("MASTER_KEY is not set in the environment")


# Configuration for PayPal ------------------------------------------------------------
PAYPAL_MODE = os.getenv('PAYPAL_MODE', 'sandbox')
PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID')
PAYPAL_SECRET_KEY = os.getenv('PAYPAL_SECRET_KEY')
PAYPAL_API_BASE_URL = 'https://api.paypal.com' 
TOWNLIT_PAYMENT_CONFIRM_TOKEN_EXPIRATION_MINUTES = 10
TOWNLIT_PAYMENT_CANCEL_TOKEN_EXPIRATION_MINUTES = 15

# Configuration for Stripe ------------------------------------------------------------
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET')
STRIPE_CURRENCY = os.getenv('STRIPE_CURRENCY', 'CAD')



# For Translate Languages --------------------------------------------------------------
from apps.profiles.gift_constants import GIFT_LANGUAGE_CHOICES
LANGUAGES = GIFT_LANGUAGE_CHOICES 
LANGUAGE_CODE = 'en'
USE_I18N = True
# USE_L10N = True 



# ---------------- File Serving Policy ------------------
SERVE_FILES_PUBLICLY = False  # اگر در آینده public شد، فقط این را True کن

# ---------------- Amazon S3 Media Storage ------------------
USE_S3 = os.getenv('USE_S3', 'False').lower() in ('true', '1', 't')

SERVE_FILES_PUBLICLY = os.getenv('SERVE_FILES_PUBLICLY', 'False').lower() in ('true', '1', 't')

if USE_S3:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')

    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'

    AWS_DEFAULT_ACL = None  
    AWS_QUERYSTRING_AUTH = True  
    AWS_S3_FILE_OVERWRITE = False  

    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
        'ACL': 'private',
    }

    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'

else:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')



# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 31536000  # مدت زمان اعتبار HSTS (1 سال)
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SECURE_BROWSER_XSS_FILTER = True
# SECURE_CONTENT_TYPE_NOSNIFF = True



# # Custom IP Whitelisting Configuration --------------------------------------------
# <RequireAll>
#     # My IP
#     Require ip 172.218.33.146
    
#     # Daivid IP
#     Require ip 88.242.139.164
    
# </RequireAll>

# public_html/api-v1-private.townlit.com

# https://github.com/settings/keys
# 


